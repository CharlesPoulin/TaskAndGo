syntax = "proto3";

package scheduler;

// Specifies the Go package path and the Go package name.
option go_package = "/scheduler;scheduler";

// The Task message describes a task to be scheduled.
message Task {
  string task_id  = 1;
  string priority = 2;   // e.g., "low", "medium", "high"
  string data     = 3;   // Arbitrary data or payload
  string status   = 4;
  int32 progress  = 6;   // Percentage progress of the task (0-100)
}

// The SubmitTaskRequest encapsulates the Task object.
message SubmitTaskRequest {
  Task task = 1;
}

// The SubmitTaskResponse returns an acknowledgment or error details.
message SubmitTaskResponse {
  bool success   = 1;
  string message = 2;
}

// Request for retrieving a taskâ€™s status.
message TaskStatusRequest {
  string task_id = 1;
}

// TaskStatusResponse returns the status of a given task.
message TaskStatusResponse {
  bool found           = 1;   // Whether the task was found
  string currentStatus = 2;   // e.g., "QUEUED", "RUNNING", "COMPLETED"
  string message       = 3;   // Additional info (e.g., logs)
}

// Request for listing all tasks.
message TaskListRequest {}

// Response containing a list of tasks.
message TaskListResponse {
  repeated Task tasks = 1;
}

// Request for getting resource usage.
message ResourceUsageRequest {}

// Representation of resource usage for a single node.
message ResourceUsage {
  string nodeName   = 1;
  int32 cpuPercent  = 2;
  int32 memPercent  = 3;
}

// Response containing a list of resource usages.
message ResourceUsageResponse {
  repeated ResourceUsage usages = 1;
}

// The Scheduler service describes the RPC methods for managing tasks.
service Scheduler {
  rpc SubmitTask(SubmitTaskRequest) returns (SubmitTaskResponse);
  rpc GetTaskStatus(TaskStatusRequest) returns (TaskStatusResponse);
  rpc ListTasks(TaskListRequest) returns (TaskListResponse);
  rpc GetResourceUsage(ResourceUsageRequest) returns (ResourceUsageResponse);
}
